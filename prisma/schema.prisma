generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  createdAt     DateTime      @default(now())
  password      String
  referralCode  String        @unique @default(cuid())
  referredBy    String?
  role          Role          @default(USER)
  updatedAt     DateTime      @updatedAt
  orders        Order[]
  transactions  Transaction[]
  referrer      User?         @relation("Referrals", fields: [referredBy], references: [id])
  referredUsers User[]        @relation("Referrals")
  wallet        Wallet?
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Float
  type        TransactionType
  description String
  walletId    String
  userId      String
  orderId     String?         @unique
  createdAt   DateTime        @default(now())
  order       Order?          @relation(fields: [orderId], references: [id])
  user        User            @relation(fields: [userId], references: [id])
  wallet      Wallet          @relation(fields: [walletId], references: [id])

  @@index([userId, type])
  @@index([walletId, createdAt])
}

model Service {
  id          String            @id @default(uuid())
  name        String
  description String
  price       Float
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  category    Category
  orders      Order[]
  providers   ServiceProvider[]
}

model Order {
  id                String       @id @default(cuid())
  userId            String
  serviceId         String
  status            Status       @default(PENDING)
  date              DateTime
  time              String
  remarks           String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  partnerId         String?
  amount            Float        @default(0)
  currency          String       @default("INR")
  razorpayOrderId   String?      @unique
  remainingAmount   Float        @default(0)
  walletAmount      Float        @default(0)
  paidAt            DateTime?
  razorpayPaymentId String?      @unique
  Partner           Partner?     @relation(fields: [partnerId], references: [id])
  service           Service      @relation(fields: [serviceId], references: [id])
  user              User         @relation(fields: [userId], references: [id])
  transaction       Transaction?

  @@index([userId, status])
  @@index([partnerId, status])
}

model Wallet {
  id           String        @id @default(cuid())
  balance      Float         @default(0)
  userId       String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Partner {
  id              String            @id @default(cuid())
  name            String
  email           String            @unique
  password        String
  service         String[]
  approved        Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Order           Order[]
  pincodes        PartnerPincode[]
  servicesPartner ServiceProvider[]
}

model ServiceProvider {
  id        String  @id @default(cuid())
  serviceId String
  partnerId String
  partner   Partner @relation(fields: [partnerId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@unique([serviceId, partnerId])
}

model PartnerPincode {
  id        String  @id @default(cuid())
  partnerId String
  pincode   String
  partner   Partner @relation(fields: [partnerId], references: [id])

  @@unique([partnerId, pincode])
}

model Blog {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(255)
  content   String
  image     String?
  author    String
  readTime  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RequestedService {
  id   String @id @default(cuid())
  name String
}

enum Role {
  USER
  ADMIN
  PARTNER
  PENDING_ADMIN
}

enum Status {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}

enum Category {
  AC_SERVICE
  BATHROOM_KITCHEN_CLEANING
  CARPENTER
  CHIMNEY_REPAIR
  ELECTRICIAN
  MICROWAVE_REPAIR
  PLUMBERS
  REFRIGERATOR_REPAIR
  SOFA_CARPET_CLEANING
  WASHING_MACHINE_REPAIR
  WATER_PURIFIER_REPAIR
}

enum TransactionType {
  CREDIT
  DEBIT
  REFERRAL_BONUS
  SIGNUP_BONUS
}
