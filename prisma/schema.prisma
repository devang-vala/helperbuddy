generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blog {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(255)
  content   String
  image     String?
  author    String
  readTime  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  isActive  Boolean  @default(true)

  @@index([isActive])
}

model Order {
  id                 String       @id @default(cuid())
  userId             String
  serviceId          String
  status             Status       @default(PENDING)
  date               DateTime
  time               String
  address            String
  pincode            String
  remarks            String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now())
  partnerId          String?
  amount             Float        @default(0)
  currency           String       @default("INR")
  razorpayOrderId    String?      @unique
  remainingAmount    Float        @default(0)
  walletAmount       Float        @default(0)
  paidAt             DateTime?
  razorpayPaymentId  String?      @unique
  acceptedAt         DateTime?
  startedAt          DateTime?
  completedAt        DateTime?
  cancelledAt        DateTime?
  paymentRequestedAt DateTime?
  Partner            Partner?     @relation(fields: [partnerId], references: [id])
  Service            Service      @relation(fields: [serviceId], references: [id])
  User               User         @relation(fields: [userId], references: [id])
  Review             Review?
  Transaction        Transaction?

  @@index([partnerId, status])
  @@index([pincode, status])
  @@index([serviceId, status])
  @@index([userId, status])
}

model Partner {
  id                      String                    @id @default(cuid())
  name                    String
  email                   String                    @unique
  password                String
  service                 String[]
  approved                Boolean                   @default(false)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @default(now())
  phoneno                 String?                   @db.VarChar(10)
  isActive                Boolean                   @default(true)
  lastActiveAt            DateTime                  @default(now())
  Order                   Order[]
  PartnerPincode          PartnerPincode[]
  PartnerRequestedService PartnerRequestedService[]
  ServiceProvider         ServiceProvider[]

  @@index([approved, isActive])
}

model PartnerPincode {
  id        String   @id @default(cuid())
  partnerId String
  pincode   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Partner   Partner  @relation(fields: [partnerId], references: [id])

  @@unique([partnerId, pincode])
  @@index([pincode, isActive])
}

model PartnerRequestedService {
  id          String               @id @default(cuid())
  name        String
  description String?
  partnerId   String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @default(now())
  status      ServiceRequestStatus @default(PENDING)
  Partner     Partner              @relation(fields: [partnerId], references: [id])

  @@index([partnerId])
  @@index([status])
}

model RequestedService {
  id   String @id @default(cuid())
  name String
}

model Review {
  id          String   @id @default(cuid())
  orderId     String   @unique
  rating      Int      @db.SmallInt
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  Order       Order    @relation(fields: [orderId], references: [id])
}

model Service {
  id              String            @id @default(cuid())
  name            String
  description     String
  price           Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  category        Category
  image           String?
  numberoforders  Int?              @default(0)
  isActive        Boolean           @default(true)
  threshold       Decimal?          @default(2) @db.Decimal
  Order           Order[]
  ServiceProvider ServiceProvider[]

  @@index([category, isActive])
}

model ServiceProvider {
  id        String   @id @default(cuid())
  serviceId String
  partnerId String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Partner   Partner  @relation(fields: [partnerId], references: [id])
  Service   Service  @relation(fields: [serviceId], references: [id])

  @@unique([serviceId, partnerId])
  @@index([partnerId, isActive])
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Float
  type        TransactionType
  description String
  walletId    String
  userId      String
  orderId     String?         @unique
  createdAt   DateTime        @default(now())
  Order       Order?          @relation(fields: [orderId], references: [id])
  User        User            @relation(fields: [userId], references: [id])
  Wallet      Wallet          @relation(fields: [walletId], references: [id])

  @@index([userId, type])
  @@index([walletId, createdAt])
}

model User {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  phoneno      String?       @unique @db.VarChar(10)
  createdAt    DateTime      @default(now())
  password     String
  referralCode String        @unique
  referredBy   String?
  role         Role          @default(USER)
  updatedAt    DateTime      @default(now())
  Order        Order[]
  Transaction  Transaction[]
  User         User?         @relation("UserToUser", fields: [referredBy], references: [id])
  other_User   User[]        @relation("UserToUser")
  Wallet       Wallet?
}

model Wallet {
  id           String        @id @default(cuid())
  balance      Float         @default(0)
  userId       String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  lastCredited DateTime?
  Transaction  Transaction[]
  User         User          @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ContactMessage {
  id        String   @id
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model system_config {
  variable_name  String   @id
  variable_value Int
  updatedAt      DateTime
}

enum Category {
  AC_SERVICE
  BATHROOM_KITCHEN_CLEANING
  CARPENTER
  CHIMNEY_REPAIR
  ELECTRICIAN
  MICROWAVE_REPAIR
  PLUMBERS
  REFRIGERATOR_REPAIR
  SOFA_CARPET_CLEANING
  WASHING_MACHINE_REPAIR
  WATER_PURIFIER_REPAIR
}

enum PaymentMode {
  ONLINE
  COD
}

enum Role {
  USER
  ADMIN
  PARTNER
  PENDING_ADMIN
}

enum ServiceRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Status {
  PENDING
  ACCEPTED
  IN_PROGRESS
  SERVICE_COMPLETED
  PAYMENT_REQUESTED
  PAYMENT_COMPLETED
  COMPLETED
  CANCELLED
}

enum TransactionType {
  CREDIT
  DEBIT
  REFERRAL_BONUS
  SIGNUP_BONUS
}
