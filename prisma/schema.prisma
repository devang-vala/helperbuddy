generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  createdAt    DateTime @default(now())
  password     String

  referralCode String   @unique @default(cuid())
  referredBy   String?
  referredUsers User[]  @relation("Referrals")
  referrer     User?    @relation("Referrals", fields: [referredBy], references: [id])

  role         Role     @default(USER)
  updatedAt    DateTime @updatedAt
  orders       Order[]
  wallet       Wallet?
  transactions Transaction[]
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Float
  type        TransactionType
  description String
  walletId    String
  userId      String
  wallet      Wallet         @relation(fields: [walletId], references: [id])
  user        User           @relation(fields: [userId], references: [id])
  orderId     String?        @unique  
  order       Order?         @relation(fields: [orderId], references: [id]) 
  createdAt   DateTime       @default(now())
  
  @@index([userId, type])
  @@index([walletId, createdAt])
}


model Service {
  id          String            @id @default(uuid())
  name        String
  description String
  price       Float
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  category    Category
  orders      Order[]
  providers   ServiceProvider[]
}

model Order {
  id              String   @id @default(cuid())
  userId          String
  serviceId       String
  status          Status   @default(PENDING)
  date            DateTime
  time            String
  remarks         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  partnerId       String?

  
  amount          Float    @default(0)
  currency        String   @default("INR")
  razorpayOrderId String?  @unique
  razorpayPaymentId String? @unique
  paidAt           DateTime?

  walletAmount    Float     @default(0)
  remainingAmount Float     @default(0)
 
  transaction     Transaction?
  Partner         Partner? @relation(fields: [partnerId], references: [id])
  service         Service  @relation(fields: [serviceId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@index([partnerId, status])
}

model Wallet {
  id           String        @id @default(cuid())
  balance      Float         @default(0)
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  @@index([userId])
}

model Partner {
  id        String            @id @default(cuid())
  name      String
  email     String            @unique
  password  String
  service   String[]
  approved  Boolean           @default(false)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  Order     Order[]
  pincodes  PartnerPincode[]
  servicesPartner  ServiceProvider[]
}

model ServiceProvider {
  id        String  @id @default(cuid())
  serviceId String
  partnerId String
  partner   Partner @relation(fields: [partnerId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@unique([serviceId, partnerId])
}

model PartnerPincode {
  id        String  @id @default(cuid())
  partnerId String
  pincode   String
  partner   Partner @relation(fields: [partnerId], references: [id])

  @@unique([partnerId, pincode])
}

model Blog {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(255)
  content   String
  image     String?
  author    String
  readTime  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RequestedService {
  id   String @id @default(cuid())
  name String
}

enum Role {
  USER
  ADMIN
  PARTNER
}

enum Status {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}

enum Category {
  AC_SERVICE
  BATHROOM_KITCHEN_CLEANING
  CARPENTER
  CHIMNEY_REPAIR
  ELECTRICIAN
  MICROWAVE_REPAIR
  PLUMBERS
  REFRIGERATOR_REPAIR
  SOFA_CARPET_CLEANING
  WASHING_MACHINE_REPAIR
  WATER_PURIFIER_REPAIR
}

enum TransactionType {
  CREDIT
  DEBIT
  REFERRAL_BONUS
  SIGNUP_BONUS
}
